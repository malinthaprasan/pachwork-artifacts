#!/bin/bash
GH_TOKEN=$1
PULL_REQ_FILE=$2
ISSUES_FILE=$3
UPDATE_NUM=$4
wso2username=$5

OUTPUT_HOME="WSO2-CARBON-UPDATE-4.4.0-$UPDATE_NUM"
SUPPORT_CARBON_APIMGT_HOME=$(printenv SUPPORT_CARBON_APIMGT_HOME)

JAGGERY_APPS="repository/deployment/server/jaggeryapps"
WEB_APPS="repository/deployment/server/webapps"
PLUGINS="repository/components/plugins"
OUTPUT_HOME_JAGGERY_APPS=$OUTPUT_HOME/carbon.home/$JAGGERY_APPS
OUTPUT_HOME_WEB_APPS=$OUTPUT_HOME/carbon.home/$WEB_APPS
OUTPUT_HOME_PLUGINS=$OUTPUT_HOME/carbon.home/$PLUGINS
PULLS_DIR="pull-requests"
JIRAS_DIR="jiras"
GH_ISSUES_DIR="git-issues"
JENKINS_DIR="jenkins"
JENKINS_META=$JENKINS_DIR/meta
JENKINS_DOWNLOADED=$JENKINS_DIR/downloaded
UPDATE_DESC=$OUTPUT_HOME/update-descriptor.yaml


FILE_MAPPINGS=$(cat <<- END
{
    "org.wso2.carbon.apimgt.rest.api.publisher-6.1.66.war":"api#am#publisher#v0.11.war",
    "org.wso2.carbon.apimgt.rest.api.store-6.1.66.war":"api#am#store#v0.11.war",
    "org.wso2.carbon.apimgt.rest.api.admin-6.1.66.war":"api#am#admin#v0.11.war"
}
END
)


################################################# FUNCTIONS #####################################################################

function canProcess() {
    local filepath=$1
    local filename=$(basename $filepath)
    local dir=$(dirname $filepath)
    if [[ $dir =~ ^features.* ]]
    then
        if [[ $filename =~ .*\.json$|.*\.js$|.*\.jag$ ]]
        then
           echo true
           return
        fi
    fi
    echo false
}

function getDestination() {
    local filepath=$1
    local filename=$(basename $filepath)
    local dir=$(dirname $filepath)
    local destDir=$(echo $dir | sed -e 's/^features\/apimgt\/org\.wso2\.carbon\.apimgt\.[a-z]*\.feature\/src\/main\/resources\///g')
    echo "$destDir"/$filename
}

function copyWithDirsToDestination() {
    local srcFilepath=$1
    local destFilepath=$2
    local destDir=$(dirname $destFilepath)
    test -d $destDir || mkdir -p $destDir && cp $srcFilepath $destFilepath
}

function isJava() {
    local filename=$(basename $1)
    if [[ $filename =~ .*\.java$ ]]
    then
       echo true
       return
    fi
    echo false
}

function getJavaComp() {
    echo  "$1" | awk -F"/src/[a-z]*/java" '{print $1}' 
}


function isJiraIssue() {
    if [[ $1 =~ .*https://wso2.org/jira.* ]]; then
       echo true
       return
    fi
    echo false
}

function isGHIssue() {
    if [[ $1 =~ .*https://github.com/wso2.* ]]; then
       echo true
       return
    fi
    echo false
}

function isJarOrWar() {
    if [[ $1 =~ .*\.jar || $1 =~ .*\.war ]]; then
       echo true
       return
    fi
    echo false
}

function isJar() {
    if [[ $1 =~ .*\.jar ]]; then
       echo true
       return
    fi
    echo false
}

function isWar() {
    if [[ $1 =~ .*\.war ]]; then
       echo true
       return
    fi
    echo false
}

function getFinalFilename() {
    local filename=$(echo $1 | awk -F"/" '{print $NF}')
    if [[ $(echo $FILE_MAPPINGS | jq ".[\"$filename\"]") == null ]]; then
        echo $filename | tr '-' '_'
    else
        echo $FILE_MAPPINGS | jq ".[\"$filename\"]" | tr -d "\""
    fi
}

function getJiraIssueId() {
    local jiraId=$(echo $1 | awk -F"https://wso2.org/jira/browse/" '{print $2}')
    echo $jiraId
}

function getGithubIssueUrl() {
    local ghIssueUrl=$(echo $1 | awk -F"https://github.com/" '{print $2}')
    echo $ghIssueUrl
}

function getGithubIssueId() {
    local ghIssueId=$(echo $1 | awk -F"https://github.com/[a-zA-Z0-9_\\-]*/[a-zA-Z0-9_\\-]*/issues/" '{print $2}')
    echo $ghIssueId
}

################################################### JIRA / GITHUB ISSUES ####################################################################

if [[ $# -eq 5 ]]; then
    true
else
    echo 'Wrong number of args supplied.'
    echo 'Usage: create-apim-update <github-token> <pull-requests-filename> <issues-filename> <update-number> <wso2-username>'
    echo
    echo 'create-apim-update 5abd6ab787eb1d6f7723456da35cba235ba1234b pull-requests.txt issues.txt 1610 malinthaa@wso2.com'
    exit 1
fi

read -s -p "Enter Password for $wso2username: " wso2pass
echo

test -d $OUTPUT_HOME && rm -r $OUTPUT_HOME
mkdir -p $OUTPUT_HOME_JAGGERY_APPS
mkdir -p $OUTPUT_HOME_WEB_APPS
mkdir -p $OUTPUT_HOME_PLUGINS
mkdir -p $JIRAS_DIR
mkdir -p $PULLS_DIR
mkdir -p $GH_ISSUES_DIR
mkdir -p $JENKINS_META
mkdir -p $JENKINS_DOWNLOADED

echo "update_number: $UPDATE_NUM" > $UPDATE_DESC
echo "platform_version: 4.4.0" >> $UPDATE_DESC
echo "platform_name: wilkes" >> $UPDATE_DESC
echo "applies_to: APIM 2.1.0" >> $UPDATE_DESC
echo "bug_fixes:" >> $UPDATE_DESC

echo "Processing issue urls - $ISSUES_FILE"
issueList=$(cat $ISSUES_FILE)
for i in $issueList; do
    echo $i
    if [[ $(isJiraIssue $i) == true ]]; then
        jiraId=$(getJiraIssueId $i)

        if [ -e "$JIRAS_DIR/$jiraId".json ]
        then
            true
        else
            echo "Getting content of $i" 
            curl "https://wso2.org/jira/rest/api/2/issue/$jiraId" > $JIRAS_DIR/$jiraId.json
        fi

        content=$(cat $JIRAS_DIR/$jiraId.json)
        issueSummary=$(echo $content | jq '.fields.summary' | tr -d '"')
        echo $jiraId": "$issueSummary
        echo "  "$jiraId": "$issueSummary >> $UPDATE_DESC

    elif [[ $(isGHIssue $i) == true ]]; then
        ghIssueId=$(getGithubIssueId $i)

        if [ -e "$GH_ISSUES_DIR/$ghIssueId".json ]
        then
            true
        else
            echo "Getting content of $i" 
            curl -H "Authorization: token $1" https://api.github.com/repos/$(getGithubIssueUrl $i) > $GH_ISSUES_DIR/$ghIssueId.json 
        fi

        content=$(cat $GH_ISSUES_DIR/$ghIssueId.json)
        issueSummary=$(echo $content | jq '.title' | tr -d '"')
        echo $i": "$issueSummary
        echo "  "$i": "$issueSummary >> $UPDATE_DESC
    else
        echo "Unsupported Issue-"$i
    fi
    echo
done

echo 'description: |' >> $UPDATE_DESC
echo '  This is a consolidated update which includes fixes for all the issues mentioned in Bug Fixes section.' >> $UPDATE_DESC
echo 'file_changes:' >> $UPDATE_DESC
echo '  added_files: []' >> $UPDATE_DESC
echo '  removed_files: []' >> $UPDATE_DESC
echo '  modified_files:' >> $UPDATE_DESC

#################################################### PULL REQUESTS ##################################################################


echo "Processing pull request urls - $PULL_REQ_FILE"
prList=$(cat $PULL_REQ_FILE)
for i in $prList; do
    pr=$(echo $i | awk -F"https://github.com/[a-zA-Z0-9_\\-]*/carbon-apimgt/pull/" '{print $2}' | awk -F"/" '{print $1}')
    PRS+=($pr)
done


echo "Extracted PR numbers : ${PRS[@]}"
echo

for i in ${PRS[@]}; do

    if [ -e "$PULLS_DIR/$i".json ]
    then
        true
    else
        echo "Getting content of $i" 
        curl -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/wso2-support/carbon-apimgt/pulls/$i/files > $PULLS_DIR/$i.json
    fi

    content=$(cat $PULLS_DIR/$i.json)
    length=$(echo $content | jq '. | length')

    for (( c=0; c<$length; c++ ))
    do
	    filename=$(echo $content | jq ".[$c].filename")
	    filesList+=($filename)
    done
done

sortedUniqueFiles=$(echo "${filesList[@]}" | tr ' ' '\n' | sort -u | tr '\"' ' ')

# echo "## Listing all changed files ##"
# for i in $sortedUniqueFiles; do
#     echo $i
# done

echo


echo "## Processing files ##"
for i in $sortedUniqueFiles; do
    echo "$i"
    if [[ $(canProcess $i) == true ]]
    then
        src=$SUPPORT_CARBON_APIMGT_HOME/$i
        dest=$OUTPUT_HOME_JAGGERY_APPS/$(getDestination $i)
        echo "- copying to $dest"
        copyWithDirsToDestination $src $dest
        echo "  - $JAGGERY_APPS/$(getDestination $i)" >> $UPDATE_DESC
    else
        echo "- Ignored"
        if [[ $(isJava $i) == true ]]
        then
            javaComp=$(getJavaComp $i)
            javaCompList+=($javaComp)
        fi
    fi
    echo
done


sortedUniqueJavaComps=$(echo "${javaCompList[@]}" | tr ' ' '\n' | sort -u | tr '\"' ' ')
echo "## Following java component jars needs to be downloaded ##"
for i in $sortedUniqueJavaComps; do
    comp=$(echo $i | awk -F"components/apimgt/" '{print $2}')
    componentList+=($comp)
    echo $comp
done

######################################################## JENKINS ##############################################################
echo

for i in ${componentList[@]}; do
    if [ -e "$JENKINS_META/$i".json ]
    then
        true
    else
        echo "Downloading meta info of $i" 
        curl -u "$wso2username:$wso2pass" "https://supportbuild-wilkes.wso2.com/jenkins/job/carbon-apimgt-6.1.66/lastBuild/org.wso2.carbon.apimgt\$$i/api/json?tree=artifacts%5BrelativePath%5D" > $JENKINS_META/$i.json
    fi

    content=$(cat "$JENKINS_META/$i".json)
    length=$(echo $content | jq '.artifacts | length')

    for (( c=0; c<$length; c++ ))
    do
        relativePath=$(echo $content | jq ".artifacts[$c].relativePath" | tr -d '"')
        if [[ $(isJarOrWar $relativePath) == true ]]; then
            
            if [[ $(isJar $relativePath) == true  ]]; then
                dest=$OUTPUT_HOME_PLUGINS/$(getFinalFilename $relativePath)
                destRelative=$PLUGINS/$(getFinalFilename $relativePath)
            elif [[ $(isWar $relativePath) == true ]]; then
                dest=$OUTPUT_HOME_WEB_APPS/$(getFinalFilename $relativePath)
                destRelative=$WEB_APPS/$(getFinalFilename $relativePath)
            else
                echo Unsupported file: $relativePath
            fi
            
            relativePathDir=$JENKINS_DOWNLOADED/$(dirname $relativePath)
            relativePathFilename=$(basename $relativePath)

            if [ -e "$relativePathDir/$relativePathFilename" ]
            then
                # checks the validity of the jar/war and download if invalid
                unzip -tq $relativePathDir/$relativePathFilename
                if [[ $? == 0 ]]; then
                    true #file is healthy. Do nothing.
                else
                    downloadArtifact=true
                fi
            else
                downloadArtifact=true
            fi
            
            if [[ $downloadArtifact == true ]]; then
                echo Downloading $relativePath
                mkdir -p $relativePathDir
                curl -u "$wso2username:$wso2pass" "https://supportbuild-wilkes.wso2.com/jenkins/job/carbon-apimgt-6.1.66/lastBuild/org.wso2.carbon.apimgt\$$i/artifact/$relativePath" > $relativePathDir/$relativePathFilename
                echo Downloaded to $relativePathDir/$relativePathFilename
            fi

            cp $relativePathDir/$relativePathFilename $dest
            echo "  - $destRelative" >> $UPDATE_DESC          
        fi
    done

done


echo
echo "$OUTPUT_HOME"
echo "======================"
tree $OUTPUT_HOME
echo
echo "update-descriptor.yaml"
echo "======================"
cat $UPDATE_DESC
echo

echo "## Finished ##"
